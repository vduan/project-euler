"""
Problem Statement:
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed
four million, find the sum of the even-valued terms.
"""

import sys

def find_fibonacci(limit):
  fib = [1, 2]
  tail_index = 1

  while fib[tail_index] <= limit:
    tail_index += 1
    fib.append(fib[tail_index - 1] + fib[tail_index - 2])
  
  fib.pop()

  return fib

def sum_evens(nums):
  evens = [x for x in nums if x % 2 == 0]
  return sum(evens)

def main():
  args = sys.argv
  if len(args) != 2:
    print_usage()
    return -1

  try:
    limit = int(args[1])
  except:
    print_usage
    return -1

  if limit < 2:
    print 'limit must be greater than 2'
    return -1

  fibonacci = find_fibonacci(limit)
  even_sum = sum_evens(fibonacci)

  print 'The sum of fibonacci numbers not exceeding ' + str(limit) + ' is ' + str(even_sum)

def print_usage():
  print 'Usage: python __file__ limit'

if __name__ == "__main__":
  main()
